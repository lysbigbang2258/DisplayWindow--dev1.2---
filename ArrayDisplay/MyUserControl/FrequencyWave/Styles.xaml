<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">

                            <!--  实现时会将 Content 置于 ScrollViewer 中。必须将其命名为 PART_ContentHost，控件才能起作用  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                Style="{DynamicResource SimpleScrollViewer}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>-->
                            <Setter TargetName="Border" Property="Background" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="strokeBrush" Color="Black" />

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="15,0,0,0"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple CheckBox  -->
    <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!--  BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                                <Path
                                    x:Name="CheckMark"
                                    Data="M 0 0 L 13 13 M 0 13 L 13 0"
                                    SnapsToDevicePixels="False"
                                    Stroke="{DynamicResource GlyphBrush}"
                                    StrokeThickness="2" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <!--  它使用 Visibility 来基于 IsChecked 隐藏和显示 CheckMark  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  右键菜单  -->
    <Style x:Key="SimpleContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Border"
                        Background="Black"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1">
                        <!--<Border.BorderBrush>
                            <SolidColorBrush Color="{TemplateBinding Border.BorderBrush}" />
                        </Border.BorderBrush>-->
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  此 BitmapEffect 供 Simple MenuItem 使用  -->
    <DropShadowBitmapEffect
        x:Key="PopupDropShadow"
        ShadowDepth="1.5"
        Softness="0.15" />

    <!--  Simple MenuItem - 该模板使用触发器来提供四种不同的菜单项排列方式，这些排列方式是通过 Role 属性设置的  -->
    <Style x:Key="SimpleMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!--
                                Grid 用于结合 Icon、Content、Glyph 复选标记和 Arrow 的列，以显示下一个级别
                                Grid 中采用大小共享方式，以便将每个 MenuItem 的 Icon、Content 和 Arrow 一起对齐
                            -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    Width="Auto"
                                    MinWidth="17"
                                    SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <!--  ContentPresenter 用来显示 Icon (如果需要)  -->
                            <ContentPresenter
                                x:Name="Icon"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />

                            <!--  Glyph 是一个复选标记(如果可选中的菜单需要)  -->
                            <Grid
                                x:Name="GlyphPanel"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                Visibility="Hidden">
                                <Path
                                    x:Name="GlyphPanelpath"
                                    VerticalAlignment="Center"
                                    Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                    Fill="{TemplateBinding Foreground}"
                                    FlowDirection="LeftToRight" />
                            </Grid>

                            <!--  菜单文本等内容  -->
                            <ContentPresenter
                                x:Name="HeaderHost"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />

                            <!--  箭头绘制的路径，该路径指向菜单的下一个级别  -->
                            <Grid
                                x:Name="ArrowPanel"
                                Grid.Column="3"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center">
                                <Path
                                    x:Name="ArrowPanelPath"
                                    VerticalAlignment="Center"
                                    Data="M0,0 L0,8 L4,4 z"
                                    Fill="{TemplateBinding Foreground}" />
                            </Grid>

                            <!--  Popup 是向下展开或横向展开(具体取决于该项所处的级别)的菜单的主体  -->
                            <Popup
                                x:Name="SubMenuPopup"
                                AllowsTransparency="true"
                                Focusable="false"
                                IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Right"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                VerticalOffset="-3">
                                <Grid x:Name="SubMenu">
                                    <Border
                                        x:Name="SubMenuBorder"
                                        Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderBrush="{DynamicResource SolidBorderBrush}"
                                        BorderThickness="1" />

                                    <!--  StackPanel 保留菜单的子级。这是通过 IsItemsHost=True 来设置的  -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!--  这些触发器通过 Role 重新配置 MenuItem 的四种排列方式以显示不同级别的菜单  -->
                    <ControlTemplate.Triggers>

                        <!--  Role = TopLevelHeader: 这是菜单中的根菜单项；Popup 向下展开  -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = TopLevelItem:  这是没有任何子项的顶级菜单的子菜单项  -->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = SubMenuHeader: 这是不包含子级的子菜单项  -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>

                        <!--  Role = SubMenuItem: 这是包含子级的子菜单项  -->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <!--  如果不存在 Icon，我们会折叠 Icon Content  -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  GlyphPanel 包含 CheckMark  -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="Margin" Value="0,0,3,3" />
                            <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />
                            <Setter TargetName="SubMenuBorder" Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" />
                        </Trigger>

                        <!--  对 Menu Highlight 和 IsEnabled 使用系统颜色  -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Border"/>-->
                            <Setter TargetName="Border" Property="Background" Value="#ff004000" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple Separator - 此模板用于菜单中的 Separator  -->
    <Style x:Key="SimpleSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  右键菜单/  -->

    <!--  Simple Radio Button  -->
    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="15,0,0,0"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!--  BulletDecorator 用于提供 checkmark 与  Content 之间的基线对齐  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Ellipse
                                    x:Name="Ellipse_Border"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeThickness="1" />
                                <Ellipse
                                    x:Name="CheckMark"
                                    Margin="4"
                                    Fill="#ff00ff00" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <!--<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>-->
                            <Setter TargetName="CheckMark" Property="Fill" Value="Blue" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>-->
                            <Setter TargetName="CheckMark" Property="Fill" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="DarkBlue" />
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Ellipse_Border"/>
                                <Setter Property="Stroke" Value="{DynamicResource GlyphBrush}" TargetName="Ellipse_Border"/>
                            </Trigger>-->
                        <!--<Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse_Border"/>
                                <Setter Property="Stroke" Value="#40000000" TargetName="Ellipse_Border"/>
                                <Setter Property="Foreground" Value="#80000000"/>
                            </Trigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  /Simple Radio Button  -->

</ResourceDictionary>